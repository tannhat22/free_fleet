<launch>
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="map_file" default="$(find ff_examples_ros1)/maps/world.yaml"/>
  <arg name="open_rviz" default="true"/>
  <arg name="move_forward_only" default="false"/>
  <arg name="initial_pose_x" default="8.07174"/>
  <arg name="initial_pose_y" default="9.47396"/>
  <arg name="initial_pose_a" default="-0.0208304"/>

  <!-- launches the basic turtlebot3 world with one basic turtlebot -->
  <include file="$(find turtlebot3_gazebo)/launch/turtlebot3_world.launch">
    <arg name="model" value="$(arg model)"/>
  </include>

  <!-- launch the navigation stack with test maps -->
  <group>
    <!-- Turtlebot3 -->
    <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
      <arg name="model" value="$(arg model)" />
    </include>

    <!-- Map server -->
    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)"/>

    <!-- AMCL -->
    <include file="$(find turtlebot3_navigation)/launch/amcl.launch">
      <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
      <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
      <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
    </include>

    <!-- move_base -->
    <include file="$(find turtlebot3_navigation)/launch/move_base.launch">
      <arg name="model" value="$(arg model)" />
      <arg name="move_forward_only" value="$(arg move_forward_only)"/>
    </include>

    <!-- rviz -->
    <group if="$(arg open_rviz)"> 
      <node pkg="rviz" type="rviz" name="rviz" required="true"
            args="-d $(find turtlebot3_navigation)/rviz/turtlebot3_navigation.rviz"/>
    </group>
  </group>

  <!-- Follow waypoints -->
  <node name="follow_waypoints" pkg="follow_waypoints"
      type="follow_waypoints_server.py" output="screen">
    <param name="map_frame" value="map"/>
    <param name="robot_name" value="base_footprint"/>
    <param name="distance_tolerance" value="0.5"/>
    <param name="action_name" value="/follow_waypoints_server"/>
    <param name="find_closest_point" value="False"/>
    <param name="update_frequency" value="5.0"/>
  </node>

  <!-- Fake battery -->
  <node name="fake_battery" pkg="follow_waypoints"
      type="fake_battery.py" output="screen">
  </node>

  <!-- launch the free fleet client first -->
  <node name="turtlebot3_free_fleet_client_node" pkg="free_fleet_client_ros1"
      type="free_fleet_client_ros1" output="screen">
    <param name="fleet_name" type="string" value="turtlebot3"/>
    <param name="robot_name" type="string" value="ros1_tb3_0"/>
    <param name="level_name" type="string" value="L1"/>
    <param name="wait_timeout" type="double" value="10.0"/>
    <param name="update_frequency" type="double" value="10.0"/>
    <param name="publish_frequency" type="double" value="5.0"/>
    <param name="dds_domain" type="int" value="42"/>dds_state_topic
    <param name="dds_state_topic" type="string" value="robot_state"/>
    <param name="dds_mode_request_topic" type="string" value="mode_request"/>
    <param name="dds_path_request_topic" type="string" value="path_request"/>
    <param name="dds_destination_request_topic" type="string" value="destination_request"/>
    <param name="dds_dock_request_topic" type="string" value="dock_request"/>
    <param name="battery_state_topic" type="string" value="/battery_state"/>
    <param name="move_base_server_name" type="string" value="move_base"/>
    <param name="follow_waypoints_server_name" type="string" value="follow_waypoints_server"/>
    <param name="docking_trigger_server_name" type="string" value=""/>
    <param name="max_dist_to_first_waypoint" type="double" value="10.0"/>
  </node>

</launch>
